# -*- coding: utf-8 -*-
"""fifa21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtFB4TEHtWm5iLT1pXLPZJZaTpgS6I7a
"""

!pip install pandasql

# import all libary we gonna use
import pandas as pd
import numpy as np
import pandasql as ps
from google.colab import data_table
from datetime import datetime
import re
import matplotlib.pyplot as plt
data_table.enable_dataframe_formatter()

# read csv file and redirect to raw variable
path = '/content/drive/MyDrive/Road to Data N/CleanData_practice/data/fifa21 raw data v2.csv'
raw = pd.read_csv(path);

# remove all unnecessary newline in dataframe
raw = raw.replace(r'\n', '', regex = True)

# remove star from rated column
raw = raw.replace('★', '', regex=True)
raw[['IR', 'W/F', 'SM']] = raw[['IR', 'W/F', 'SM']].astype('int64')

#@title Query Zone { run: "auto" }
query = """ select *
            from raw
            limit 10
        """
result = ps.sqldf(query)
result

#@title Columns
raw.columns

"""# Date column

---


"""

# convert date column from format "Jul 1, 2004" to standard date format
raw["Joined"] = pd.to_datetime(raw["Joined"], format="%b %d, %Y").dt.date
raw["Loan Date End"] = pd.to_datetime(raw["Loan Date End"], format="%b %d, %Y").dt.date

"""# Duplicated value"""

#check duplicated player using LongName, Height, Nationality, and Age
raw[raw[['LongName', 'Height', 'Nationality', 'Age']].duplicated(keep=False)].loc[:,['Name', 'LongName', 'Height', 'Age', 'Nationality', 'Club', 'POT', 'Best Position', 'photoUrl']].sort_values(['LongName', 'Age'])

"""from previous result, i found that the player name "Peng Wang" has 2 duplicated record. So, i choose to drop his lower performance record"""

#drop lower performance row
raw = raw.sort_values(['LongName', 'POT']).drop_duplicates(subset=['LongName', 'Height', 'Nationality', 'Age'], keep='last')

"""# Height

---


"""

#explore some numeric column
raw[['Height', 'Weight', 'Value', 'Wage']].info()

"""**All column above shoud be converted to numeric column (see insight data for each column using Query zone)**"""

# create function for converting Height to cm in number
def to_cm(high):
  if 'cm' in high:
    return float(re.sub('cm','',high))
  elif "'" in high:
    high = high.split("'")
    feet = float(high[0])
    inch = float(re.sub('"','',high[1]))
    return feet*30.48 + inch*2.54

#convert Height column 
raw['Height'] = raw['Height'].apply(lambda x : to_cm(x))

#check Height column
raw[['Height']].describe()

"""# Weight

---


"""

# create function to convert weight to kg in number
def to_kg(mass):
  if 'kg' in mass:
    return float(re.sub('kg', '', mass))
  elif 'lbs' in mass:
    return round(float(re.sub('lbs', '', mass))/2.205, 2)

# convert Weight column
raw['Weight'] = raw['Weight'].apply(lambda x: to_kg(x))

raw[['Weight']].describe()

"""# Value&Wage

---

"""

# create function to convert to be amount of money in number
def to_num(pennie):
  pennie = re.sub('€', '', pennie)
  if 'M' in pennie:
    pennie = re.sub('M', '', pennie)
    return float(pennie)*1000000
  elif 'K' in pennie:
    pennie = re.sub('K', '', pennie)
    return float(pennie)*1000
  else:
    return float(pennie)

# convert money columns
raw['Value'] = raw['Value'].apply(lambda x: to_num(x))
raw['Wage'] = raw['Wage'].apply(lambda x: to_num(x))
raw['Release Clause'] = raw['Release Clause'].apply(lambda x: to_num(x))

# check money column
raw[['Value', 'Wage', 'Release Clause']].describe()

# create color string array for more clear visualization
color=[]
for value in raw['Wage']:
  if value < 1e5:
    color.append('black')
  elif value < 2*1e5:
    color.append('blue')
  else:
    color.append('red')
    
# dive into more detail about these couple columns
plt.scatter(raw['Value']/1e6, 
            raw['Wage'],
            s=2.5,
            c=color)

plt.grid(True, which="both")
plt.title('Value and Wage relation')
plt.xlabel('Value in euro (Million)')
plt.ylabel('Wage per week in euro')
plt.show()

"""# Missing Value"""

#show dataframe shape
print('rows: '+str(raw.shape[0])+'\ncolumns: '+str(raw.shape[1])+'\n')
#check the columns that have missing value
raw.isna().sum()[raw.isna().sum() != 0]

"""we don't need to do anything with missing values in "Loan Date End" column because all un-loaned players don't need end date of loan

In Hits column, we will turn it to numeric and fill missing value with mean of group of "Best Position"
"""

#create table select only ID, and Hits
temp_table = ps.sqldf("select ID, Hits from raw where Hits is not null") 

# change Hits column to numerical in temp table using function to_num from Value&Wage part
temp_table['Hits'] = temp_table['Hits'].apply(lambda x: to_num(x))

# merge float Hits column to raw table on ID column
raw = raw.merge(temp_table, how='left', on='ID', suffixes=('_obj','_num'))

# fill missing value by mean of each group of positions
raw["Hits_num"] = raw.groupby("Best Position")['Hits_num'].apply(lambda x: x.fillna(x.mean()))

#check
raw.loc[:,['Best Position','Hits_obj','Hits_num']]

# drop Hits_obj column
raw = raw.drop(columns=['Hits_obj'])

"""# Outcome"""

raw.to_csv('cleaned_fifa21_data.csv', header=False, index=False, sep=',', encoding='utf-8')

!cat cleaned_fifa21_data.csv